#include <iostream>
#include <string>
#include <vector>
using namespace std;

class Course {
protected:
    string course_code;
    string course_name;
    string industry_name;

public:
    Course(string code, string name, string industry)
        : course_code(code), course_name(name), industry_name(industry) {}

    string getCourseCode() const { return course_code; }
    string getCourseName() const { return course_name; }
    string getIndustryName() const { return industry_name; }

    virtual void displayCourseDetails() const = 0;
};

class ComputerScienceCourse : public Course {
private:
    int creditHours;
    string department;

public:
    ComputerScienceCourse(string code, string name, string industry,
                          int credits, string dept)
        : Course(code, name, industry), creditHours(credits), department(dept) {}

    void displayCourseDetails() const override {
        cout << "Course Code: " << getCourseCode() << endl;
        cout << "Course Name: " << getCourseName() << endl;
        cout << "Credit Hours: " << creditHours << endl;
        cout << "Department: " << department << endl;
    }
};

class Student {
protected:
    string student_name;
    int student_id;
    vector<Course*> enrolled_courses;

public:
    Student(string studentName, int studentID)
        : student_name(studentName), student_id(studentID) {}

    string getStudentName() const { return student_name; }
    int getStudentID() const { return student_id; }

    void enrollCourse(Course* course) {
        enrolled_courses.push_back(course);
    }

    void displayEnrolledCourses() const {
        cout << "Student Name: " << student_name << endl;
        cout << "Student ID: " << student_id << endl;
        cout << "Enrolled Courses: " << endl;
        for (const auto& course : enrolled_courses) {
            course->displayCourseDetails();
            cout << endl;
        }
    }
};

class Teacher {
protected:
    string teacher_name;
    int teacher_id;
    vector<Course*> taught_courses;

public:
    Teacher(string teacherName, int teacherID)
        : teacher_name(teacherName), teacher_id(teacherID) {}

    string getTeacherName() const { return teacher_name; }
    int getTeacherID() const { return teacher_id; }

    void teachCourse(Course* course) {
        taught_courses.push_back(course);
    }

    void displayTaughtCourses() const {
        cout << "Teacher Name: " << teacher_name << endl;
        cout << "Teacher ID: " << teacher_id << endl;
        cout << "Courses Taught: " << endl;
        for (const auto& course : taught_courses) {
            course->displayCourseDetails();
            cout << endl;
        }
    }

    void addCourseDetails() {
        string code, name, industry;
        cout << "Enter Course Code: ";
        cin >> code;
        cout << "Enter Course Name: ";
        cin >> name;
        cout << "Enter Industry Name: ";
        cin >> industry;

        string department;
        cout << "Enter Department: ";
        cin >> department;

        Course* newCourse = new ComputerScienceCourse(code, name, industry, 0, department);
        taught_courses.push_back(newCourse);
    }
};

int main() {
    Teacher teacher1("Arti", 1);

    teacher1.addCourseDetails();

    teacher1.displayTaughtCourses();

    return 0;
}

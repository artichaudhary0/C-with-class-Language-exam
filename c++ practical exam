#include <iostream>
#include <string>
#include <vector>
#include <stdexcept> // for exception handling
#include <limits>    // for numeric_limits
using namespace std;

class Course {
protected:
    string course_code;
    string course_name;
    string industry_name;

public:
    Course(string code, string name, string industry)
        : course_code(code), course_name(name), industry_name(industry) {}

    string getCourseCode() const { return course_code; }
    string getCourseName() const { return course_name; }
    string getIndustryName() const { return industry_name; }

    virtual void displayCourseDetails() const = 0;
};

class ComputerScienceCourse : public Course {
private:
    int creditHours;
    string department;

public:
    ComputerScienceCourse(string code, string name, string industry,
                          int credits, string dept)
        : Course(code, name, industry), creditHours(credits), department(dept) {}

    void displayCourseDetails() const override {
        cout << "Course Code: " << getCourseCode() << endl;
        cout << "Course Name: " << getCourseName() << endl;
        cout << "Credit Hours: " << creditHours << endl;
        cout << "Department: " << department << endl;
    }
};

class HistoryCourse : public Course {
private:
    int year;
    string region;

public:
    HistoryCourse(string code, string name, string industry,
                  int yr, string reg)
        : Course(code, name, industry), year(yr), region(reg) {}

    void displayCourseDetails() const override {
        cout << "Course Code: " << getCourseCode() << endl;
        cout << "Course Name: " << getCourseName() << endl;
        cout << "Year: " << year << endl;
        cout << "Region: " << region << endl;
    }
};

class MathematicsCourse : public Course {
private:
    int creditHours;

public:
    MathematicsCourse(string code, string name, string industry,
                      int credits)
        : Course(code, name, industry), creditHours(credits) {}

    void displayCourseDetails() const override {
        cout << "Course Code: " << getCourseCode() << endl;
        cout << "Course Name: " << getCourseName() << endl;
        cout << "Credit Hours: " << creditHours << endl;
    }
};

class Student {
protected:
    string student_name;
    int student_id;
    vector<Course*> enrolled_courses;

public:
    Student(string studentName, int studentID)
        : student_name(studentName), student_id(studentID) {}

    string getStudentName() const { return student_name; }
    int getStudentID() const { return student_id; }

    void enrollCourse(Course* course) {
        enrolled_courses.push_back(course);
    }

    void displayEnrolledCourses() const {
        cout << "Student Name: " << student_name << endl;
        cout << "Student ID: " << student_id << endl;
        cout << "Enrolled Courses: " << endl;
        for (const auto& course : enrolled_courses) {
            course->displayCourseDetails();
            cout << endl;
        }
    }
};

class Teacher {
protected:
    string teacher_name;
    int teacher_id;
    vector<Course*> taught_courses;

public:
    Teacher(string name, int id) : teacher_name(name), teacher_id(id) {}

    string getTeacherName() const { return teacher_name; }

    void addCourse(string code, string name, string industry, int credits, string dept) {
        try {
          
            for (const auto& course : taught_courses) {
                if (course->getCourseCode() == code) {
                    throw invalid_argument("Course with the same code already exists.");
                }
            }
       
            if (credits < 0) {
                throw invalid_argument("Credit hours cannot be negative.");
            }
            // If no issues, add the course
            Course* newCourse = new ComputerScienceCourse(code, name, industry, credits, dept);
            taught_courses.push_back(newCourse);
        } catch (const invalid_argument& e) {
            cerr << "Error: " << e.what() << endl;
        }
    }

    void displayTaughtCourses() const {
        cout << "Teacher: " << teacher_name << " (ID: " << teacher_id << ")" << endl;
        cout << "Courses Taught: " << endl;
        for (const auto& course : taught_courses) {
            course->displayCourseDetails();
            cout << endl;
        }
    }
};

int main() {
    const int numInstructors = 2;
    vector<Teacher> teachers;


    for (int i = 0; i < numInstructors; ++i) {
        string name;
        int id;
        cout << "Enter Instructor " << i + 1 << " Name: ";
        cin >> name;
        cout << "Enter Instructor " << i + 1 << " ID: ";
        cin >> id;
        teachers.emplace_back(name, id);
    }


    for (size_t i = 0; i < teachers.size(); ++i) {
        string code, name, industry, dept;
        int credits;
        cout << "Enter Course Code for " << teachers[i].getTeacherName() << ": ";
        cin >> code;
        cout << "Enter Course Name: ";
        cin >> name;
        cout << "Enter Industry Name: ";
        cin >> industry;
        cout << "Enter Department: ";
        cin >> dept;
        cout << "Enter Credit Hours: ";
        try {
            cin >> credits;
            if (cin.fail()) {
                throw invalid_argument("Invalid input for credit hours.");
            }
            teachers[i].addCourse(code, name, industry, credits, dept);
        } catch (const invalid_argument& e) {
            cerr << "Error: " << e.what() << endl;
          cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
    }

    for (size_t i = 0; i < teachers.size(); ++i) {
        teachers[i].displayTaughtCourses();
        cout << endl;
    }

    return 0;
}

